/*
    Se o exercÃ­cio nÃ£o especificou nome do identificador (variÃ¡vel, 
    parÃ¢metro, propriedade, funÃ§Ã£o), declare ele com o nome de sua 
    preferÃªncia. 

    Quando um exercÃ­cio pedir para vocÃª criar uma funÃ§Ã£o, escolha 
    a forma de declaraÃ§Ã£o de funÃ§Ã£o que vocÃª preferir.

    Mas arrow function Ã© mais legal ðŸ˜‰
*/

/*
    01

    Crie uma funÃ§Ã£o que recebe dois parÃ¢metros e retorna o resultado da multiplicaÃ§Ã£o deles.
*/

const multiplicaValores = (primeiroValor, segundoValor) => primeiroValor * segundoValor;

/*
    02

    Declare um objeto e armazene-o em uma const.

    O objeto deve ter uma propriedade armazenando 7 e outra armazenando 3.

    Invoque a funÃ§Ã£o que vocÃª criou acima e passe como argumentos os nÃºmeros do objeto. 

    A invocaÃ§Ã£o da funÃ§Ã£o deve retornar 21.
*/

const meuObjeto = {
    propriedade1: 7,
    propriedade2: 3,
};

const propriedade1 = meuObjeto.propriedade1;
const propriedade2 = meuObjeto.propriedade2;
const resultadoExercicio2 = multiplicaValores(propriedade1, propriedade2);

/*
    03

    Declare um array e armazene-o em uma const.

    O array deve ter os itens 5 e 7.

    Invoque a funÃ§Ã£o que vocÃª criou no exercÃ­cio 01 e passe como argumentos os nÃºmeros do array. 

    A invocaÃ§Ã£o da funÃ§Ã£o deve retornar 35.
*/

const meuArray = [5, 7];
const numero5 = meuArray[0];
const numero7 = meuArray[1];
const resultadoExercicio3 = multiplicaValores(numero5, numero7);

/*
    04

    Crie uma funÃ§Ã£o pegaNumerosImpares que retorna um array com os nÃºmeros 5, 3 e 9.

    Invoque a funÃ§Ã£o que vocÃª criou no exercÃ­cio 01 e passe como argumentos os nÃºmeros 3 e 9 do array. 

    NÃ£o armazene os retornos da invocaÃ§Ã£o de pegaNumerosImpares em consts.

    A invocaÃ§Ã£o da funÃ§Ã£o que vocÃª criou no exercÃ­cio 01 deve retornar 27.
*/

const pegaNumerosImpares = () => [5, 3, 9];
const numero3 = pegaNumerosImpares()[1];
const numero9 = pegaNumerosImpares()[2];
const resultadoExercicio4 = multiplicaValores(numero3, numero9);

/*
    05

    Crie uma funÃ§Ã£o pegaObj que retorna um array com 3 objetos. 

    Cada objeto deve ter uma propriedade numero.

    A propriedade numero do primeiro objeto deve armazenar 2.

    A propriedade numero do segundo objeto deve armazenar 4.

    E a propriedade numero do terceiro objeto deve armazenar 6.

    Invoque a funÃ§Ã£o que vocÃª criou no exercÃ­cio 01 e passe como argumentos os nÃºmeros 2 e 6 dos objetos. 

    NÃ£o armazene os retornos da invocaÃ§Ã£o de pegaObj em consts.

    A invocaÃ§Ã£o da funÃ§Ã£o que vocÃª criou no exercÃ­cio 01 deve retornar 12.
*/

const pegaObj = () => {
    return [
        { numero: 2 },
        { numero: 4 },
        { numero: 6 },
    ]
};

const numero2 = pegaObj()[0].numero;
const numero6 = pegaObj()[2].numero;
const resultadoExercicio5 = multiplicaValores(numero2, numero6);

/*
    06

    Crie uma funÃ§Ã£o pegaRespostasUsuario que retorna um array com os itens 'A', 'B', 'A' e 'D'.    
*/

const pegaRespostasUsuario = () => ['A', 'B', 'A', 'D'];

/*
    07

    Crie uma funÃ§Ã£o pegaPontuacao que contÃ©m um parÃ¢metro respostasUsuario.

    Na primeira linha da funÃ§Ã£o, crie uma const que armazena o Ãºltimo 
    item do array que vocÃª declarou no exercÃ­cio acima. Armazene o 
    item usando o parÃ¢metro respostasUsuario e sintaxe de colchetes. 
    NÃ£o invoque a funÃ§Ã£o que vocÃª criou no exercÃ­cio anterior. 

    Abaixo da const, crie uma let pontuacao que recebe zero. 

    Se a const que vocÃª declarou na primeira linha da funÃ§Ã£o Ã© igual 
    a 'A', atribua a pontuacao o valor que ela tem somado a 50.

    SenÃ£o, se a const Ã© igual a 'C', atribua a pontuacao o valor que ela tem somado a 25.

    SenÃ£o, atribua a pontuacao o valor que ela tem somado a 100.

    Na Ãºltima linha dentro do bloco da funÃ§Ã£o, retorne pontuacao.

    const pegaPontuacao = (respostasUsuario) => {
        const letraD = respostasUsuario[3];
        let pontuacao = 0;

        if (letraD === 'A') {
            pontuacao += 50;
        }
        else if (letraD === 'C') {
            pontuacao += 25;
        }
        else {
            pontuacao += 100;
        }

        return pontuacao;
    };
*/

const pegaPontuacao = (respostasUsuario) => {
    const letraD = respostasUsuario[3];
    const pontuacao = 0;

    if (letraD === 'Ae') {
        return pontuacao + 50;
    }
    else if (letraD === 'Ce') {
        return pontuacao + 25;
    }
    else {
        return pontuacao + 100;
    }
};

/*
    08

    Crie uma const respostasUsuario que armazena o retorno da 
    invocaÃ§Ã£o de pegaRespostasUsuario.

    Invoque pegaPontuacao e passe respostasUsuario como argumento.

    A invocaÃ§Ã£o de pegaPontuacao deve retornar 100.
*/

const respostasUsuario = pegaRespostasUsuario();
console.log(pegaPontuacao(respostasUsuario))

/*
    09

    FaÃ§a o cÃ³digo da funÃ§Ã£o pegaPontuacao ser imutÃ¡vel. 

    Isto Ã©, elimine da funÃ§Ã£o qualquer ocorrÃªncia de reatribuiÃ§Ã£o. 

    Dicas: 

    A palavra-chave return pode ser inserida dentro de bloco de if, else if ou else. 

    O Ãºnico requisito para vocÃª usar return Ã© ele estar dentro de uma funÃ§Ã£o.

    const pegaPontuacao = (respostasUsuario) => {
        const letraD = respostasUsuario[3];
        const pontuacao = 0;

        if (letraD === 'A') {
            return pontuacao + 50;
        }
        else if (letraD === 'C') {
            return pontuacao + 25;
        }
        else {
            return pontuacao + 100;
        }
    };
*/